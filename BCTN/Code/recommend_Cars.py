import numpy as np
import streamlit as st
import pandas as pd
from num2words import num2words
import base64
import requests

def app():

    # st.header('ƒê·ªÅ xu·∫•t')

    df = pd.read_excel('C:\Users\ADMIN\Downloads\BCTN\Data\Data_Recommend.xlsx')

    col1 = st.sidebar
    def sidebar_bg(img_url):
        side_bg_ext = 'jpg'  # Assuming the image format is PNG (can be adjusted if needed)

        # Retrieve image data from URL
        response = st.cache_resource(requests.get)(img_url, stream=True)
        img_data = response.content

        # Encode image data as base64
        encoded_data = base64.b64encode(img_data).decode()

        # Apply background image style to sidebar
        st.markdown(
            f"""
            <style>
            [data-testid="stSidebar"] > div:first-child {{
                background: url(data:image/{side_bg_ext};base64,{encoded_data});
                background-size: cover;  /* Adjust background sizing as needed */
            }}
            </style>
            """,
            unsafe_allow_html=True,
        )

    # Example usage with a valid image URL
    # img_url = "https://images.rawpixel.com/image_800/cHJpdmF0ZS9sci9pbWFnZXMvd2Vic2l0ZS8yMDIzLTEwL3Jhd3BpeGVsb2ZmaWNlM19taW5pbWFsX2ZsYXRfdmVjdG9yX2Flc3RoZXRpY19pbGx1c3RyYXRpb25fb2ZfYV9hYWMyODk1Ny02ODI3LTQ3OGUtOTQ2Ni0wNWI0MzVhYjk2MmQtYi5qcGc.jpg"  # Replace with your desired image URL
    # img_url = "https://4kwallpapers.com/images/wallpapers/porsche-918-spyder-1290x2796-13004.jpg" 
    img_url = "https://i.pinimg.com/originals/09/22/ad/0922ad89888ffd9968858717c1901ac1.jpg"
    sidebar_bg(img_url)

    with col1:
        # Widget ƒë·ªÉ ch·ªçn T√¨nh Tr·∫°ng xe
        selected_state = col1.multiselect("Ch·ªçn T√¨nh tr·∫°ng xe:", options=df['T√¨nh tr·∫°ng'].unique())

        if selected_state:
                filtered_brands = df.loc[(df['T√¨nh tr·∫°ng'].isin(selected_state)), 'H√£ng xe'].unique()
        else:
            filtered_brands = df['H√£ng xe'].unique()
        # S·∫Øp x·∫øp H√£ng xe theo b·∫£ng ch·ªØ c√°i
        filtered_brands = sorted(filtered_brands)

        selected_brands = st.multiselect("Ch·ªçn H√£ng xe:", filtered_brands)
        # L·ªçc D√≤ng xe d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
        filtered_vehicles = df.loc[df['H√£ng xe'].isin(selected_brands), 'D√≤ng xe'].unique()
        # Widget ƒë·ªÉ ch·ªçn D√≤ng xe
        selected_vehicles = st.multiselect("Ch·ªçn D√≤ng xe:", filtered_vehicles)
        
        if selected_brands:
            if selected_vehicles:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_styles = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'Ki·ªÉu d√°ng'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_styles = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'Ki·ªÉu d√°ng'].unique()
        else:
            filtered_styles = df['Ki·ªÉu d√°ng'].unique()

        # Widget ƒë·ªÉ ch·ªçn Ki·ªÉu d√°ng
        selected_styles = st.multiselect("Ch·ªçn Ki·ªÉu d√°ng:", filtered_styles)
        # Widget ƒë·ªÉ ch·ªçn NƒÉm sx
        if 'Xe C≈©' in selected_state or 'Xe c≈©' in selected_state:
            if selected_brands:
                if selected_vehicles:
                    # L·ªçc NƒÉm s·∫£n xu·∫•t d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                    filtered_year = df.loc[df['D√≤ng xe'].isin(selected_vehicles), 'NƒÉm SX'].unique()
                else:
                    # L·ªçc NƒÉm s·∫£n xu·∫•t d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                    filtered_year = df.loc[df['H√£ng xe'].isin(selected_brands), 'NƒÉm SX'].unique()
            else:
                filtered_year = df['NƒÉm SX'].unique()
        else:
            filtered_year = df['NƒÉm SX'].unique()

        # S·∫Øp x·∫øp c√°c nƒÉm s·∫£n xu·∫•t theo th·ª© t·ª± tƒÉng d·∫ßn
        filtered_year = sorted(filtered_year, reverse=True)

        selected_year = st.multiselect("Ch·ªçn NƒÉm s·∫£n xu·∫•t:", filtered_year)

        
        # Widget ƒë·ªÉ ch·ªçn Nhi√™n li·ªáu 
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_fuel = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'Nhi√™n li·ªáu'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_fuel = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'Nhi√™n li·ªáu'].unique()
        else:
            filtered_fuel = df['Nhi√™n li·ªáu'].unique()
        selected_segment = st.multiselect("Ch·ªçn Nhi√™n li·ªáu:", filtered_fuel)
        
        # Widget ƒë·ªÉ ch·ªçn H·ªôp s·ªë 
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_hopso = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'H·ªôp s·ªë'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_hopso = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'H·ªôp s·ªë'].unique()
        else:
            filtered_hopso = df['H·ªôp s·ªë'].unique()
        selected_hopso = st.multiselect("Ch·ªçn H·ªôp s·ªë:", filtered_hopso)
        
        # Widget ƒë·ªÉ ch·ªçn S·ªë ch·ªó ng·ªìi
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_seat = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'S·ªë ch·ªó ng·ªìi'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_seat = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'S·ªë ch·ªó ng·ªìi'].unique()
        else:
            filtered_seat = df['S·ªë ch·ªó ng·ªìi'].unique()
        # S·∫Øp x·∫øp s·ªë ch·ªó ng·ªìi theo th·ª© t·ª± tƒÉng d·∫ßn
        filtered_seat = sorted(filtered_seat)

        selected_seat = st.multiselect("Ch·ªçn S·ªë ch·ªó ng·ªìi:", filtered_seat)

        # Widget ƒë·ªÉ ch·ªçn M√†u s·∫Øc
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_color = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'M√†u s·∫Øc'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_color = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'M√†u s·∫Øc'].unique()
        else:
            filtered_color = df['M√†u s·∫Øc'].unique()
        selected_color = st.multiselect("Ch·ªçn M√†u s·∫Øc:", filtered_color)

        # Widget ƒë·ªÉ ch·ªçn ƒê∆°n gi√°
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_price = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'Kho·∫£ng gi√°'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_price = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'Kho·∫£ng gi√°'].unique()
        else:
            filtered_price = df['Kho·∫£ng gi√°'].unique()
        # S·∫Øp x·∫øp c√°c Gi√° ti·ªÅn theo th·ª© t·ª± tƒÉng d·∫ßn
        filtered_price = ['0 - 500 tri·ªáu', '500 tri·ªáu - 1 t·ª∑', '1 t·ª∑ - 1.5 t·ª∑', '1.5 t·ª∑ - 2 t·ª∑', '2 t·ª∑ tr·ªü l√™n']

        selected_price = st.multiselect("Ch·ªçn Gi√° ti·ªÅn:", filtered_price)
        

    # N√∫t l·ªçc
        filter_button = st.button("T√¨m ki·∫øm")
    
    # if selected_brands or selected_vehicles or selected_styles or selected_state or selected_segment or selected_hopso or selected_seat or selected_year: #or (selected_km_min and selected_km_max):
#     # Kh·ªüi t·∫°o ƒëi·ªÅu ki·ªán l·ªçc
    mask = pd.Series([True] * len(df))

    
    # L·ªçc DataFrame d·ª±a tr√™n c√°c l·ª±a ch·ªçn
    if selected_state:
        mask &= df['T√¨nh tr·∫°ng'].isin(selected_state)
    if selected_brands:
        mask &= df['H√£ng xe'].isin(selected_brands)
    if selected_vehicles:
        mask &= df['D√≤ng xe'].isin(selected_vehicles)
    if selected_styles:
        mask &= df['Ki·ªÉu d√°ng'].isin(selected_styles)
    if selected_segment:
        mask &= df['Nhi√™n li·ªáu'].isin(selected_segment)
    if selected_hopso:
        mask &= df['H·ªôp s·ªë'].isin(selected_hopso)
    if selected_seat:
        mask &= df['S·ªë ch·ªó ng·ªìi'].isin(selected_seat)
    if selected_year:
        mask &= df['NƒÉm SX'].isin(selected_year)
    if selected_color:
        mask &= df['M√†u s·∫Øc'].isin(selected_color)
    if selected_price:
        mask &= df['Kho·∫£ng gi√°'].isin(selected_price)
    
    if selected_brands or selected_vehicles or selected_styles or selected_state or selected_segment or selected_hopso or selected_seat or selected_year or selected_color or selected_price:
        filter_button_2 = st.success(str(selected_state + selected_brands + selected_vehicles + selected_styles + selected_year + selected_segment + selected_hopso + selected_seat + selected_color + selected_price))
    else:
        st.write("H√£y l·ª±a ch·ªçn ti√™u ch√≠ ph√π h·ª£p v·ªõi b·∫°n !")

    # N·∫øu n√∫t l·ªçc ƒë∆∞·ª£c nh·∫•n
    if filter_button:
    
        filtered_df = df[mask]
        
        # Reset index
        filtered_df = filtered_df.reset_index(drop=True)
        
        if filtered_df.shape[0] == 0:
            st.error("***K·∫øt qu·∫£ kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y***\n\n H√£y ch·ªçn üîª / nh·∫≠p l·∫°i üí¨    üßê")
        else: 
            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng features
            st.write("S·ªë l∆∞·ª£ng xe ƒë∆∞·ª£c t√¨m th·∫•y: ", filtered_df.shape[0])
            

            # Hi·ªÉn th·ªã h√¨nh ·∫£nh, t√™n xe v√† ƒë∆°n gi√°
            cols = st.columns(3)
            count = 0
            for index, row in filtered_df.iterrows():
                with cols[index % 3]:
                    if 'Image_URL' in df.columns:
                        st.image(row['Image_URL'], caption=row['T√™n Xe'])
                        # st.image(row['Image_URL'])
                        # st.write(f"""
                        #             <div style="text-align: center;">
                        #             <font-size: 10px;'> <strong>{str(row['T√™n Xe'])}</strong>
                        #             </div>
                        #             """, unsafe_allow_html=True)

                    # st.write(f"<div style='text-align: center;'>ƒê∆°n gi√°: {str(row['ƒê∆°n gi√°'])}</div>", unsafe_allow_html=True)
                        if not pd.isna(row['ƒê∆°n gi√°']):                              
                            if isinstance(row['ƒê∆°n gi√°'], float) or isinstance(row['ƒê∆°n gi√°'], int):
                                number = row['ƒê∆°n gi√°']
                                formatted_number = f"{number:,.0f}‚Ç´"
                                st.write(f"""
                                        <div style="text-align: center;">
                                        <font-size: 10px;'>Gi√°: <strong>{formatted_number}</strong>
                                        </div>
                                        """, unsafe_allow_html=True)                                    
                                price_in_words = row['Gi√° b·∫±ng ch·ªØ']
                                price_text = f"""
                                    <div style="text-align: center;">
                                    <font size="10px">B·∫±ng ch·ªØ: <strong>{price_in_words}</strong></font>
                                    </div>
                                """
                                
                                st.write(price_text, unsafe_allow_html=True)
                                
                            else:
                                st.write(f"""
                                    <div style="text-align: center;">
                                    <font-size: 10px;'>Gi√°: <strong>{str(row['ƒê∆°n gi√°'])}</strong>
                                    </div>
                                    """, unsafe_allow_html=True)
                    
                    
                    col1, col2 = st.columns(2)  # Chia th√†nh 2 c·ªôt
                    with col1:
                        st.caption('- ' + str(row['H·ªôp s·ªë']))
                        st.caption('- ' + str(row['Nhi√™n li·ªáu']))
                        st.caption('- ' + str(row['T·ªânh th√†nh']))
                        st.caption('- ' + str(row['Ki·ªÉu d√°ng']))
                    with col2:                            
                        if row['T√¨nh tr·∫°ng'] == 'Xe M·ªõi' or row['T√¨nh tr·∫°ng'] == 'Xe m·ªõi':
                            st.caption('- ' + str(row['T√¨nh tr·∫°ng']))
                        else: 
                            if np.isnan(row['Km ƒë√£ ƒëi']):
                                st.caption('- ' + str(row['T√¨nh tr·∫°ng']))
                            else:
                                st.caption('- ' + str(row['T√¨nh tr·∫°ng']) + ' (' + str(int(row['Km ƒë√£ ƒëi'])) + " KM" + ')')
                        st.caption('- ' + str(row['S·ªë ch·ªó ng·ªìi']) + ' ch·ªó')
                        st.caption('- ' + str(row['NƒÉm SX']))
                        st.caption('- ' + str(row['Xu·∫•t x·ª©']))
                                    
                    # st.write('')  # Th√™m m·ªôt d√≤ng tr·ªëng ƒë·ªÉ t·∫°o kho·∫£ng c√°ch                        
                    col1, col2 = st.columns(2)  # Chia th√†nh 2 c·ªôt
                    with col2:
                        # Button with bold text using markdown syntax
                        button_content = f"**Xem chi ti·∫øt**"

                        # Button styling using inline CSS
                        button_style = """
                        <style>
                            .buy-button {
                            background-color: #CBEAF5;
                            color: white;
                            padding: 5px 10px;
                            border: none;
                            border-radius: 10px;
                            float: right;
                            cursor: pointer;
                            text-decoration: none;
                            font-weight: normal !important;
                            }
                        </style>
                        """
                        # Combine button content, link, and style
                        content = f"""{button_style}
                        <a class="buy-button" href="{row['Link xe']}" target="_blank">{button_content}</a>
                        """
                        # Display content with unsafe_allow_html for button styling
                        st.markdown(content, unsafe_allow_html=True)
                    
                    # with col1:                            
                    #     detail_button = st.button(str(count) + ". Xem chi ti·∫øt")
                    #     count += 1
                    #     if detail_button:
                    #         with st.expander("N·ªôi dung chi ti·∫øt", expanded=True):
                    #             st.write("ƒê√¢y l√† n·ªôi dung chi ti·∫øt")
                        
                    
                    st.write("-" * 10)